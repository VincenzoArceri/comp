module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
    Int -> Exp {}
    Id -> Exp {}
    Bool -> Exp {}
} > {
    "-" Exp -> Exp {cons("Exp1442Syn")}
} > { left:
    Exp "*" Exp -> Exp {left, cons("Exp1444Syn")}
    Exp "/" Exp -> Exp {left, cons("Exp1445Syn")}
    Exp "%" Exp -> Exp {left, cons("Exp1446Syn")}
} > { left:
    Exp "+" Exp -> Exp {left, cons("Exp1447Syn")}
    Exp "-" Exp -> Exp {left, cons("Exp1448Syn")}
} > { non-assoc:
    Exp "<" Exp -> Exp {non-assoc, cons("Exp1449Syn")}
    Exp "<=" Exp -> Exp {non-assoc, cons("Exp1450Syn")}
    Exp ">" Exp -> Exp {non-assoc, cons("Exp1452Syn")}
    Exp ">=" Exp -> Exp {non-assoc, cons("Exp1453Syn")}
    Exp "==" Exp -> Exp {non-assoc, cons("Exp1454Syn")}
    Exp "!=" Exp -> Exp {non-assoc, cons("Exp1455Syn")}
} > {
    "not" Exp -> Exp {cons("Exp1456Syn")}
} > { left:
    Exp "&&" Exp -> Exp {left, cons("Exp1457Syn")}
    Exp "||" Exp -> Exp {left, cons("Exp1458Syn")}
} > {
    "execute" Block -> Exp {cons("Exp1459Syn")}
} > {
    Id "=" Exp -> Exp {right, cons("Exp1460Syn")}
}

context-free start-symbols
Val DzString DzBool Stmts Ddecl String Int KResult Stmt Float Bool Exps Ids Block Vals Id Exp DzInt DzFloat K
context-free syntax
    "var" InsertDzExps ";" -> Ddecl {cons("Ddecl1440Syn")}
    "lock" InsertDzInt ";" -> Stmt {cons("Stmt1470Syn")}
    Exp ";" -> Stmt {cons("Stmt1464Syn")}
    DzInt -> Int {}
    "(" InsertDzExp ")" -> Exp {cons("Exp1Bracket")}
    Int -> Val {}
    "read" "(" ")" -> Exp {cons("Exp1443Syn")}
    {Val ","}* -> Vals {cons("Vals1ListSyn")}
    "print" "(" InsertDzExp ")" ";" -> Stmt {cons("Stmt1469Syn")}
    DzBool -> Bool {}
    Stmt -> Stmts {}
    {Exp ","}* -> Exps {cons("Exps1ListSyn")}
    DzFloat -> Float {}
    "return" InsertDzExp ";" -> Stmt {cons("Stmt1468Syn")}
    "unlock" InsertDzInt ";" -> Stmt {cons("Stmt1472Syn")}
    "if" "(" InsertDzExp ")" InsertDzBlock "else" Block -> Stmt {cons("Stmt1465Syn")}
    Block -> Stmt {}
    Bool -> Val {}
    DzString -> String {}
    "{" InsertDzStmts "}" -> Block {cons("Block1463Syn")}
    Val -> KResult {}
    "while" "(" InsertDzExp ")" Block -> Stmt {cons("Stmt1467Syn")}
    "{" "}" -> Block {cons("Block1462Syn")}
    Ddecl -> Stmt {}
    Stmts Stmts -> Stmts {right, cons("Stmts1473Syn")}
    Val -> Exp {}
    "if" "(" InsertDzExp ")" Block -> Stmt {cons("Stmt1466Syn")}
    {Id ","}* -> Ids {cons("Ids1ListSyn")}
    Stmts -> InsertDzStmts
    Exps -> InsertDzExps
    Block -> InsertDzBlock
    Exp -> InsertDzExp
    Int -> InsertDzInt


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    Val        -> K
    DzString        -> K
    DzBool        -> K
    Stmts        -> K
    Ddecl        -> K
    String        -> K
    Int        -> K
    Stmt        -> K
    Float        -> K
    Bool        -> K
    Block        -> K
    Id        -> K
    Exp        -> K
    DzInt        -> K
    DzFloat        -> K
lexical syntax
    "false" -> DzDzBool
    "true" -> DzDzBool


    "while" -> IdDz {reject}
    "not" -> IdDz {reject}
    "else" -> IdDz {reject}
    "lock" -> IdDz {reject}
    "if" -> IdDz {reject}
    "read" -> IdDz {reject}
    "unlock" -> IdDz {reject}
    "var" -> IdDz {reject}
    "false" -> IdDz {reject}
    "execute" -> IdDz {reject}
    "print" -> IdDz {reject}
    "true" -> IdDz {reject}
    "return" -> IdDz {reject}

lexical restrictions
    %% follow restrictions


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    [\-\+]?[0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?[fFdD]? -> DzFloatDz
    "\"" ((~[\"\n\r\\])|(((([\\][nrtf\"\\])|([\\][x][0-9a-fA-F][0-9a-fA-F]))|([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]))|([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))*"\"" -> DzStringDz
    "&&" -> DzStringDz {reject}
    "||" -> DzStringDz {reject}
    "<=" -> DzStringDz {reject}
    "while" -> DzStringDz {reject}
    "not" -> DzStringDz {reject}
    "else" -> DzStringDz {reject}
    "lock" -> DzStringDz {reject}
    "if" -> DzStringDz {reject}
    "==" -> DzStringDz {reject}
    "read" -> DzStringDz {reject}
    "unlock" -> DzStringDz {reject}
    "%" -> DzStringDz {reject}
    "var" -> DzStringDz {reject}
    "false" -> DzStringDz {reject}
    "(" -> DzStringDz {reject}
    ")" -> DzStringDz {reject}
    "*" -> DzStringDz {reject}
    "+" -> DzStringDz {reject}
    "," -> DzStringDz {reject}
    "-" -> DzStringDz {reject}
    "execute" -> DzStringDz {reject}
    "/" -> DzStringDz {reject}
    "print" -> DzStringDz {reject}
    "true" -> DzStringDz {reject}
    ";" -> DzStringDz {reject}
    "{" -> DzStringDz {reject}
    "<" -> DzStringDz {reject}
    "!=" -> DzStringDz {reject}
    "=" -> DzStringDz {reject}
    "}" -> DzStringDz {reject}
    ">" -> DzStringDz {reject}
    "return" -> DzStringDz {reject}
    ">=" -> DzStringDz {reject}
    "&&" -> IdDz {reject}
    "||" -> IdDz {reject}
    "<=" -> IdDz {reject}
    "while" -> IdDz {reject}
    "not" -> IdDz {reject}
    "else" -> IdDz {reject}
    "lock" -> IdDz {reject}
    "if" -> IdDz {reject}
    "==" -> IdDz {reject}
    "read" -> IdDz {reject}
    "unlock" -> IdDz {reject}
    "%" -> IdDz {reject}
    "var" -> IdDz {reject}
    "false" -> IdDz {reject}
    "(" -> IdDz {reject}
    ")" -> IdDz {reject}
    "*" -> IdDz {reject}
    "+" -> IdDz {reject}
    "," -> IdDz {reject}
    "-" -> IdDz {reject}
    "execute" -> IdDz {reject}
    "/" -> IdDz {reject}
    "print" -> IdDz {reject}
    "true" -> IdDz {reject}
    ";" -> IdDz {reject}
    "{" -> IdDz {reject}
    "<" -> IdDz {reject}
    "!=" -> IdDz {reject}
    "=" -> IdDz {reject}
    "}" -> IdDz {reject}
    ">" -> IdDz {reject}
    "return" -> IdDz {reject}
    ">=" -> IdDz {reject}
    "&&" -> DzIntDz {reject}
    "||" -> DzIntDz {reject}
    "<=" -> DzIntDz {reject}
    "while" -> DzIntDz {reject}
    "not" -> DzIntDz {reject}
    "else" -> DzIntDz {reject}
    "lock" -> DzIntDz {reject}
    "if" -> DzIntDz {reject}
    "==" -> DzIntDz {reject}
    "read" -> DzIntDz {reject}
    "unlock" -> DzIntDz {reject}
    "%" -> DzIntDz {reject}
    "var" -> DzIntDz {reject}
    "false" -> DzIntDz {reject}
    "(" -> DzIntDz {reject}
    ")" -> DzIntDz {reject}
    "*" -> DzIntDz {reject}
    "+" -> DzIntDz {reject}
    "," -> DzIntDz {reject}
    "-" -> DzIntDz {reject}
    "execute" -> DzIntDz {reject}
    "/" -> DzIntDz {reject}
    "print" -> DzIntDz {reject}
    "true" -> DzIntDz {reject}
    ";" -> DzIntDz {reject}
    "{" -> DzIntDz {reject}
    "<" -> DzIntDz {reject}
    "!=" -> DzIntDz {reject}
    "=" -> DzIntDz {reject}
    "}" -> DzIntDz {reject}
    ">" -> DzIntDz {reject}
    "return" -> DzIntDz {reject}
    ">=" -> DzIntDz {reject}
    "&&" -> DzFloatDz {reject}
    "||" -> DzFloatDz {reject}
    "<=" -> DzFloatDz {reject}
    "while" -> DzFloatDz {reject}
    "not" -> DzFloatDz {reject}
    "else" -> DzFloatDz {reject}
    "lock" -> DzFloatDz {reject}
    "if" -> DzFloatDz {reject}
    "==" -> DzFloatDz {reject}
    "read" -> DzFloatDz {reject}
    "unlock" -> DzFloatDz {reject}
    "%" -> DzFloatDz {reject}
    "var" -> DzFloatDz {reject}
    "false" -> DzFloatDz {reject}
    "(" -> DzFloatDz {reject}
    ")" -> DzFloatDz {reject}
    "*" -> DzFloatDz {reject}
    "+" -> DzFloatDz {reject}
    "," -> DzFloatDz {reject}
    "-" -> DzFloatDz {reject}
    "execute" -> DzFloatDz {reject}
    "/" -> DzFloatDz {reject}
    "print" -> DzFloatDz {reject}
    "true" -> DzFloatDz {reject}
    ";" -> DzFloatDz {reject}
    "{" -> DzFloatDz {reject}
    "<" -> DzFloatDz {reject}
    "!=" -> DzFloatDz {reject}
    "=" -> DzFloatDz {reject}
    "}" -> DzFloatDz {reject}
    ">" -> DzFloatDz {reject}
    "return" -> DzFloatDz {reject}
    ">=" -> DzFloatDz {reject}
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/- [0-9]
